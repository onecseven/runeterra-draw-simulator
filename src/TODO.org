* Tasklist
** DONE Receive decklists
*** DONE Input field for deck code
*** DONE Deck code validity checker? Or does the lor-decode package contain that?
*** DONE Action, reducers for this. Also figure out a structure for the code.
** DONE Show decklist
*** DONE connected the typescript to the react what the fuck
*** DONE decklist in the store
*** DONE decklist component
** DONE Query Builders
*** DONE Write component that can write MULTIPLE Mulligan Queries and send them to the store
**** DONE MulliganRules should show the contents of state.mulligan.queries
***** DONE it should also a [+] button to add more rules.
**** DONE Add a subcomponent to make a form to create a MulliganQuery.
**** DONE Create subcomponent to handle the CONDITION part of the MulliganQuery
**** DONE Create subcomponent to handle the ACTION part of the MulliganQuery
**** DONE Create a subcumponent to handle the REFERENCECARD part of the Mulligan Query
**** DONE Store connection
*** DONE Write a component that can write MULTIPLE tags and send them to the store
** DONE Migrate to typescript!!!
** DONE Function that looks up cards given a card code. But from the decklist.
** DONE Add the ability to "KEEP" all copies, 2 or 1 ofs.
*** DONE Add a new mulligan action, "KEEP_ONE" and "KEEP_TWO"
*** DONE Replace "KEEP" with "KEEP_ALL"
** DONE Add new component that displays how many hits each counters receive.[CounterDisplay.tsx]
*** TODO And, if loaded, shows which cards the hand drew.
** DONE remove action for tags
*** DONE think about how to approach this
** DONE remove action for mulligans
** WAIT Export/Import JSON of Mulligan/Tag/Deck combinations
** WAIT Non-destructive Update deck
*** TODO Deck Update action
**** Deck Update should include code that sanitizes tags/mulligans if they combinations
**** cards that are no longer present and delete them if necessary
*** TODO Override modal?
 
 
* New UI Design
** NOW Design New Workflow / Views
*** DONE Replace the DeckList component with a box with the card images 
**** TODO Give it a border

**** TODO Make an UI store
**** TODO Redesign selectedCard action and have the selected card be the default in the dropdowns
*** DONE Replace the RadioChoices component with a list Radio Choice component that looks like this:
  [radio](https://tailwindui.com/img/components/radio-groups.02-list-with-description-xl.png)
**** DONE Messing around with Radio Choices and MulliganQuery, has made me cognizant that CSS alone
     will be able to accomplish the above change, but I feel that it is warranted that we break
     up MulliganQueryBuilder into subcomponents for further fine-tuning.
*** DONE Replace RulesContainer with the following tab system
  https://codepen.io/wallaceerick/pen/
*** DONE Take TagList and MulliganList out of MulliganContainer/Tag Container and put it below it in its own div. It
    might be necessary to odo this before replacing RulesContainer with the tab system. It might even be necessary to
    rework the Two Containers into just RulesContainer and have a ListContainer below. We might need to used
    uiSlice to handle switching between components.
*** DONE Find a nice drop down.
*** DONE Style tagQueryBuilder
*** NOW Make a new component that lets ExtensibleCardChooser know how many cards to display
**** NEXT connect tagQueryBuilder components to UI store!!
SCHEDULED: <2021-06-10 Thu>
***** WAIT It should send a number to the UI store
***** WAIT ExtensibleCardChooser should read defaultNumber from the store
**** DONE Figure out a way to make this dropdown and the turn picker be like a square
*** TODO Selected cards apply a selection thing on the decklist
**** Changing tabs should clear UI store.
*** TODO Create a new List component
*** TODO "Mulligan/Tag Added" feedback (?)
*** TODO New Tab in the Rules Thingy that helps the user get the app
** TODO "Default behaviour" option that applies a "Thrown Always" mulligan behavior to all cards that applies
unless they have another   